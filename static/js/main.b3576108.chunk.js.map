{"version":3,"sources":["components/WeatherInfo/WeatherInfo.js","components/WeatherContainer/WeatherContainer.js","App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","data","temperature","humidity","description","city","Fragment","style","fontWeight","className","WeatherContainer","useState","searchQuery","setSearchQuery","weatherData","setWeatherData","isValidZipCode","setIsValidZipCode","placeholder","onChange","event","zipCode","target","value","isValid","test","validateZipCode","length","maxLength","onClick","fetch","then","response","json","temp","main","toFixed","weather","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAiCeA,MA9Bf,SAAqBC,GAAQ,IAAD,EAC2BA,EAAMC,KAAnDC,EADkB,EAClBA,YAAaC,EADK,EACLA,SAAUC,EADL,EACKA,YAAaC,EADlB,EACkBA,KAC5C,OACE,kBAAC,IAAMC,SAAP,KACE,6BACE,uBAAGC,MAAO,CAAEC,WAAY,SAAxB,SACA,2BAAIH,IAGN,6BACE,uBAAGE,MAAO,CAAEC,WAAY,SAAxB,gBACA,2BAAIJ,IAGN,6BACE,uBAAGG,MAAO,CAAEC,WAAY,SAAxB,gBACA,2BACGN,EACD,0BAAMO,UAAU,kBAFlB,MAMF,6BACE,uBAAGF,MAAO,CAAEC,WAAY,SAAxB,aACA,2BAAIL,EAAJ,Q,MC+DOO,MAtFf,WACE,IAD0B,EAEYC,mBAAS,IAFrB,mBAEnBC,EAFmB,KAENC,EAFM,OAGYF,mBAAS,CAC7CT,YAAa,KACbC,SAAU,KACVC,YAAa,KACbC,KAAM,OAPkB,mBAGnBS,EAHmB,KAGNC,EAHM,OAUkBJ,oBAAS,GAV3B,mBAUnBK,EAVmB,KAUHC,EAVG,KAuD1B,OACE,yBAAKR,UAAU,qBACb,4BAAQA,UAAU,kBAChB,iDACA,6BACE,2BACES,YAAY,iBACZT,UAAU,gBACVU,SAnDV,SAA2BC,GACzB,IAAIC,EAAUD,EAAME,OAAOC,MACvBC,EAWN,SAAyBH,GAEvB,MADY,WACCI,KAAKJ,GAbJK,CAAgBL,GAC9BR,EAAeQ,GAEXG,GAAuB,KAAZH,GAAqC,IAAnBG,EAAQG,OACvCV,GAAkB,GAElBA,GAAkB,GAEpBJ,EAAeO,EAAME,OAAOC,QA0CpBK,UAAU,MAEZ,4BAAQC,QApChB,WAEOb,GAAkC,KAAhBJ,EAKvBkB,MAAM,uDAAD,OACoDlB,EADpD,qBApCS,qCAuCXmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GAAI,OACRc,EAAe,CACbb,aAQkBgC,EARYjC,EAAKkC,KAAKD,MAStCA,EAAO,QAAQE,QAAQ,IARzBjC,SAAUF,EAAKkC,KAAKhC,SACpBC,YAAaH,EAAKoC,QAAQ,GAAGF,KAC7B9B,KAAMJ,EAAKqC,OAKnB,IAA0BJ,KAlBtBjB,GAAkB,IAiCmBR,UAAU,kBAA3C,YAKJ,uBAAGA,UAAU,SAASO,EAAiB,GAAK,sBAC5C,yBAAKP,UAAU,gBACgB,OAA5BK,EAAYZ,YACX,mDAEE,uBAAGO,UAAU,kBAAb,aAGF,kBAAC,EAAD,CAAaR,KAAMa,O,MCvEdyB,MARf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,QCKc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.b3576108.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./WeatherInfo.css\";\n\nfunction WeatherInfo(props) {\n  const { temperature, humidity, description, city } = props.data;\n  return (\n    <React.Fragment>\n      <div>\n        <p style={{ fontWeight: \"bold\" }}>City:</p>\n        <p>{city}</p>\n      </div>\n\n      <div>\n        <p style={{ fontWeight: \"bold\" }}>Description:</p>\n        <p>{description}</p>\n      </div>\n\n      <div>\n        <p style={{ fontWeight: \"bold\" }}>Temperature:</p>\n        <p>\n          {temperature}\n          <span className=\"degree-symbol\"></span>C\n        </p>\n      </div>\n\n      <div>\n        <p style={{ fontWeight: \"bold\" }}>Humidity:</p>\n        <p>{humidity}%</p>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default WeatherInfo;\n","import React, { useState } from \"react\";\nimport WeatherInfo from \"../WeatherInfo/WeatherInfo\";\nimport \"./WeatherContainer.css\";\n\nfunction WeatherContainer() {\n  const API_KEY = \"6f5f2082b4fd44b3747c6ac39562862d\";\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [weatherData, setWeatherData] = useState({\n    temperature: null,\n    humidity: null,\n    description: null,\n    city: null\n  });\n\n  const [isValidZipCode, setIsValidZipCode] = useState(true);\n\n  function updateSearchQuery(event) {\n    let zipCode = event.target.value;\n    let isValid = validateZipCode(zipCode);\n    setSearchQuery(zipCode);\n\n    if (isValid || zipCode === \"\" || isValid.length === 5) {\n      setIsValidZipCode(true);\n    } else {\n      setIsValidZipCode(false);\n    }\n    setSearchQuery(event.target.value);\n  }\n\n  function validateZipCode(zipCode) {\n    let regex = /[0-9]{5}/;\n    return regex.test(zipCode);\n  }\n\n  function getWeatherData() {\n    //checking if zipcode is invalid or search query is empty\n    if (!isValidZipCode || searchQuery === \"\") {\n      setIsValidZipCode(false); //upon clicking search return error code\n      return;\n    }\n    //obtain data from api\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?zip=${searchQuery},us&appid=${API_KEY}`\n    )\n      .then(response => response.json())\n      .then(data =>\n        setWeatherData({\n          temperature: convertToCelsius(data.main.temp),\n          humidity: data.main.humidity,\n          description: data.weather[0].main,\n          city: data.name //in accordance to openweather docs\n        })\n      );\n  }\n\n  function convertToCelsius(temp) {\n    return (temp - 273.15).toFixed(0);\n  }\n\n  return (\n    <div className=\"weather-container\">\n      <header className=\"weather-header\">\n        <h3>Weather Generator</h3>\n        <div>\n          <input\n            placeholder=\"Enter Zip Code\"\n            className=\"search-engine\"\n            onChange={updateSearchQuery}\n            maxLength=\"6\"\n          />\n          <button onClick={getWeatherData} className=\"material-icons\">\n            search\n          </button>\n        </div>\n      </header>\n      <p className=\"error\">{isValidZipCode ? \"\" : \"*Invalid Zip Code*\"}</p>\n      <div className=\"weather-info\">\n        {weatherData.temperature === null ? (\n          <p>\n            No Weather To Display\n            <i className=\"material-icons\">wb_sunny</i>\n          </p>\n        ) : (\n          <WeatherInfo data={weatherData} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherContainer;\n","import React from \"react\";\nimport WeatherContainer from \"../src/components/WeatherContainer/WeatherContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}